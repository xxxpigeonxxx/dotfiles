" vim: foldmethod=marker

if &compatible
  set nocompatible
endif

filetype plugin indent on

" Function source_rc {{{
function! s:source_rc(path)
  execute 'source' fnameescape(expand('~/.vim/rc/' . a:path))
endfunction
" }}}

call s:source_rc('plug.vim')

call s:source_rc('plugins.rc.vim')

call camelcasemotion#CreateMotionMappings('<leader>')

call s:source_rc('functions.rc.vim')

" Commands --------------------------------------------------------------------- {{{
" Count {{{
command! -nargs=1 Count execute printf('%%s/%s//gn', escape(<q-args>, '/')) | normal! ``
" }}}
" }}}

" Spelling --------------------------------------------------------------------- {{{
set dictionary+=/usr/share/dict/words thesaurus+=$HOME/.thesaurus
" }}}

" Basic Settings --------------------------------------------------------------- {{{

" Switch syntax highlighting on, when the terminal has colors
if &t_Co > 2 || has("gui_running")
  syntax on
endif

set clipboard=unnamed
let mapleader="\\"                                " set leader
set textwidth=0                                   " don't wrap text
set autoindent                                    " set automatic indentingset automatic indenting
set history=50                                    " keep 50 lines of command line history
set nowrap                                        " turn off line wrapping.
set showcmd                                       " displays incomplete commands
set noshowmode                                    " don't diplay mode (powerline does it better)
set backspace=indent,eol,start                    " allow backspacing over everything in insert mode
set hidden                                        " handle multiple buffers better.
set number
set relativenumber                                " display relative line numbers
set ruler                                         " show the cursor position all the time
set cursorline                                    " highlight current line
set title                                         " change terminals title
set visualbell                                    " no beeping.
set laststatus=2                                  " show the status line all the time
set background=dark
set pastetoggle=<f2>
set list
set listchars=tab:┊\ ,eol:¬,extends:❯,precedes:❮
au WinEnter * setlocal cursorline                 " Show current line highlight when entering a window
au WinLeave * setlocal nocursorline               " Remove current line highlight when leaving a window
au FocusLost * :wa                                " Automatically save files when they lose focus
au VimResized * :wincmd =                         " Resize splits when the window is resized
" }}}

" WildMenu Completion ---------------------------------------------------------- {{{
set wildmenu                                      " enhanced command line completion.
set wildmode=list:longest,list:full               " complete files like a shell.
set wildignore+=.hg,.git,.svn                     " Version control
set wildignore+=*.aux,*.out,*.toc                 " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg    " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest  " compiled object files
set wildignore+=*.spl                             " compiled spelling word lists
set wildignore+=*.sw?                             " Vim swap files
set wildignore+=*.DS_Store                        " OSX bullshit
" }}}

" Line Return ------------------------------------------------------------------ {{{
augroup line_return
  au!
  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  au BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif
augroup end
" }}}

" Tabs ------------------------------------------------------------------------- {{{
set tabstop=2                                     " set tab size
set shiftwidth=2                                  " set how man columns text gets indented with indent operations
set expandtab                                     " dont auto convert tabs into spaces
" }}}

" Backups/Swap Files/Undo File ------------------------------------------------- {{{
set nobackup                                      " don't make a backup before overwritting a file.
set nowritebackup                                 " and again.
set undofile                                      " persistent undo
set undoreload=10000
set directory=$HOME/.vim/tmp/swap//               " keep swap files in one location
set undodir=$HOME/.vim/tmp/undo//                 " undo files location
set backupdir=$HOME/.vim/tmp/backup//             " backups location
" }}}

" Searching and Movement ------------------------------------------------------- {{{
set ignorecase                                    " Case-insensitive searching
set smartcase                                     " Search case-insensitive when search string is all-lowercase,
                                                  " otherwise search case-sensitive
set incsearch                                     " do incremental searching
set hlsearch                                      " highlight matches
set showmatch
set scrolloff=4                                   " Lines of context around the cursor.
set sidescroll=1
set sidescrolloff=10
set virtualedit+=block
" Highlight current word matches
autocmd CursorMoved * if getfsize(@%) < 1000000 | silent! exe printf('match SpellLocal /\<%s\>/', expand('<cword>')) | endif
hi CursorLine cterm=NONE ctermfg=NONE ctermbg=235 guibg=#222222
" }}}

" Mappings --------------------------------------------------------------------- {{{
" toggle relative / normal line numbers
nnoremap <silent><C-n> :set relativenumber!<cr>
map <leader>jt  <Esc>:%!python -m json.tool<CR>
" Tabs ------------------------------------------------------------------------- {{{
map <Leader>tt :tabnew<cr>
map <Leader>te :tabedit
map <Leader>tc :tabclose<cr>
map <Leader>to :tabonly<cr>
map <Leader>tn :tabnext<cr>
map <Leader>tp :tabprevious<cr>
map <Leader>tf :tabfirst<cr>
map <Leader>tl :tablast<cr>
map <Leader>tm :tabmove
" }}}
" }}}

" Folding ---------------------------------------------------------------------- {{{
set foldlevelstart=2
set foldopen=insert,jump,mark,percent,tag,search

" tab to toggle foldes
nnoremap <silent> <Tab> @=(foldlevel('.')?'za':"\<Tab>")<CR>
" create fold with tab
vnoremap <Tab> zf

" "Refocus" folds
nnoremap ,z zMzvzz
" output fold level after chage
nnoremap zr zr:echo &foldlevel<cr>
nnoremap zm zm:echo &foldlevel<cr>
nnoremap zR zR:echo &foldlevel<cr>
nnoremap zM zM:echo &foldlevel<cr>

function! MyFoldText() " {{{
  let line = getline(v:foldstart)

  let nucolwidth = &fdc + &number * &numberwidth
  let windowwidth = winwidth(0) - nucolwidth - 3
  let foldedlinecount = v:foldend - v:foldstart

  " expand tabs into spaces
  let onetab = strpart('          ', 0, &tabstop)
  let line = substitute(line, '\t', onetab, 'g')

  let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
  let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
  return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()

" }}}

" Color Scheme ----------------------------------------------------------------- {{{
let g:airline_theme = "palenight"
" let g:airline_theme='dracula'
if (has("termguicolors"))
  set termguicolors
endif
" colorscheme dracula
colorscheme palenight
" }}}

" Environments (GUI/Consoloe) -------------------------------------------------- {{{
if has('gui_running')
else
  if has('mouse')
    set mouse=a
  endif
endif
" }}}

au VimLeave * set guicursor=a:hor20-Cursor/lCursor-blinkon1

" {{{
nmap <leader>sp :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
" }}}

hi Normal guibg=NONE ctermbg=NONE
